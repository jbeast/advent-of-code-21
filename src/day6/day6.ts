import { map, filter, reduce, pipe, construct, forEach, tap } from "ramda";

class Fish {
  private isNew: boolean = true;
  internalTimer: number;

  constructor(internalTimer: number) {
    this.internalTimer = internalTimer;
  }

  age() {
    if (this.internalTimer === 0) {
      this.isNew = false;
      this.internalTimer = 6;
    } else {
      this.internalTimer--;
    }
  }

  shouldCreate() {
    return this.internalTimer === 6 && !this.isNew;
  }
}

function maybeAddNewFish(fish: ReadonlyArray<Fish>): Fish[] {
  return fish.reduce(
    (memo, value) => {
      if (value.shouldCreate()) {
        memo.push(new Fish(8));
      }
      return memo;
    },
    [...fish]
  );
}

function simulate(
  fish: ReadonlyArray<Fish>,
  days: number
): ReadonlyArray<Fish> {
  if (days === 0) {
    return fish;
  } else {
    fish.forEach((f) => f.age());
    const newFish = maybeAddNewFish(fish);
    console.log(newFish);
    return simulate(newFish, days - 1);
  }
}

const constructFish = map(construct(Fish));

console.log(simulate(constructFish([3, 4, 3, 1, 2]), 80).length);

const puzzleInput = [
  1,
  1,
  1,
  3,
  3,
  2,
  1,
  1,
  1,
  1,
  1,
  4,
  4,
  1,
  4,
  1,
  4,
  1,
  1,
  4,
  1,
  1,
  1,
  3,
  3,
  2,
  3,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  4,
  1,
  1,
  4,
  3,
  1,
  2,
  3,
  1,
  1,
  1,
  5,
  2,
  1,
  1,
  1,
  1,
  2,
  1,
  2,
  5,
  2,
  2,
  1,
  1,
  1,
  3,
  1,
  1,
  1,
  4,
  1,
  1,
  1,
  1,
  1,
  3,
  3,
  2,
  1,
  1,
  3,
  1,
  4,
  1,
  2,
  1,
  5,
  1,
  4,
  2,
  1,
  1,
  5,
  1,
  1,
  1,
  1,
  4,
  3,
  1,
  3,
  2,
  1,
  4,
  1,
  1,
  2,
  1,
  4,
  4,
  5,
  1,
  3,
  1,
  1,
  1,
  1,
  2,
  1,
  4,
  4,
  1,
  1,
  1,
  3,
  1,
  5,
  1,
  1,
  1,
  1,
  1,
  3,
  2,
  5,
  1,
  5,
  4,
  1,
  4,
  1,
  3,
  5,
  1,
  2,
  5,
  4,
  3,
  3,
  2,
  4,
  1,
  5,
  1,
  1,
  2,
  4,
  1,
  1,
  1,
  1,
  2,
  4,
  1,
  2,
  5,
  1,
  4,
  1,
  4,
  2,
  5,
  4,
  1,
  1,
  2,
  2,
  4,
  1,
  5,
  1,
  4,
  3,
  3,
  2,
  3,
  1,
  2,
  3,
  1,
  4,
  1,
  1,
  1,
  3,
  5,
  1,
  1,
  1,
  3,
  5,
  1,
  1,
  4,
  1,
  4,
  4,
  1,
  3,
  1,
  1,
  1,
  2,
  3,
  3,
  2,
  5,
  1,
  2,
  1,
  1,
  2,
  2,
  1,
  3,
  4,
  1,
  3,
  5,
  1,
  3,
  4,
  3,
  5,
  1,
  1,
  5,
  1,
  3,
  3,
  2,
  1,
  5,
  1,
  1,
  3,
  1,
  1,
  3,
  1,
  2,
  1,
  3,
  2,
  5,
  1,
  3,
  1,
  1,
  3,
  5,
  1,
  1,
  1,
  1,
  2,
  1,
  2,
  4,
  4,
  4,
  2,
  2,
  3,
  1,
  5,
  1,
  2,
  1,
  3,
  3,
  3,
  4,
  1,
  1,
  5,
  1,
  3,
  2,
  4,
  1,
  5,
  5,
  1,
  4,
  4,
  1,
  4,
  4,
  1,
  1,
  2,
];

console.log("Answer: ", simulate(constructFish(puzzleInput), 80).length);
